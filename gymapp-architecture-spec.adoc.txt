Software architecture For AV-Gym sytem web app 


= SPEC-001: Web-Based Gym Membership and Management Application
:sectnums:
:toc:


== Background

This design aims to convert an Excel-based Gym Membership Management solution, originally built using VBA and spreadsheets, into a scalable, web-based application. The Excel file provides features such as member CRUD operations, check-in/check-out logs, membership plan tracking, billing automation, and visual formatting using macros.

Rebuilding this tool as a web application brings key benefits:

- Cross-device access (desktop, tablet, mobile)
- Scalable data storage and management
- Enhanced user experience and UI
- Security and authentication for multi-user access
- Integration with cloud-based storage and APIs

== Requirements

=== Must Have (M)
- [M] Member Management (Add/Edit/Delete)
- [M] Store member details (name, image, contact info, membership plan)
- [M] Generate and assign unique Member IDs
- [M] Upload and view member images
- [M] Check-in/Check-out system with timestamp logging
- [M] Barcode input support (for ID entry via scanner)
- [M] Membership Plan CRUD and auto-invoicing
- [M] Invoice history per member
- [M] Dashboard summarizing key metrics (active members, invoices, check-ins)
- [M] Admin login/authentication

=== Should Have (S)
- [S] Member ID card generator (PDF export with barcode)
- [S] Search and filter by name/ID/status/plan
- [S] Scheduled billing (auto-generate invoices monthly or weekly)
- [S] Mobile-responsive UI

=== Could Have (C)
- [C] Role-based access (e.g., Admin, Front Desk)
- [C] Notifications for membership expiry
- [C] Report export (Excel/PDF)

=== Won’t Have (W)
- [W] Public registration portal
- [W] Integration with payment gateways (Phase 2)


== Method

=== 1. System Architecture Overview

[plantuml]
----
@startuml
actor Admin

Admin --> WebFrontend : Login, Manage Members, Plans, Invoices
WebFrontend --> BackendAPI : REST API Calls
BackendAPI --> Database : CRUD Operations
BackendAPI --> FileStorage : Upload/Retrieve Member Images
BackendAPI --> PDFService : Generate ID Cards / Invoices
BackendAPI --> Scheduler : Run recurring invoice jobs

@enduml
----

=== 2. Technology Stack

* Frontend: React.js + Tailwind CSS
* Backend: Django (Python) with Django REST Framework
* Database: PostgreSQL (for robustness and scaling)
* File Storage: Local filesystem (dev) or AWS S3 (prod)
* Auth: JWT-based authentication
* PDF Generation: `pdfkit` or `WeasyPrint`
* Barcode: JS barcode scanner integration + `python-barcode`
* Scheduler: Celery + Redis for periodic billing tasks

=== 3. Key Modules and Components

==== 3.1 Authentication
- JWT-based login
- Admin users only for MVP

==== 3.2 Member Management
- CRUD: name, address, phone, notes, image
- Upload member photo
- Generate unique member ID (UUID or sequential)
- View profile and billing history

==== 3.3 Check-In / Check-Out
- Input: barcode or manual entry
- Log with timestamp and member ID
- Daily check-in record per member

==== 3.4 Membership Plans
- Fields: name, price, duration (e.g., 1 month), billing frequency
- Auto-assign to member
- Billing cycle generation

==== 3.5 Invoicing
- Generate invoice on plan registration or scheduled billing
- View history per member
- Generate downloadable PDF invoices

==== 3.6 ID Cards
- Export printable PDF with name, ID, barcode, image

==== 3.7 Dashboard & Search
- Overview: total members, active plans, today’s check-ins
- Filters: name, plan, status
- Quick access buttons: Add Member, New Invoice

=== 4. Database Schema (PostgreSQL)

```sql
Table: users
- id (UUID)
- username
- password_hash
- created_at

Table: members
- id (UUID)
- full_name
- phone
- address
- status (active/inactive)
- image_path
- notes
- created_at

Table: membership_plans
- id (UUID)
- name
- price
- duration_days
- billing_frequency (enum: monthly, weekly)
- created_at

Table: invoices
- id (UUID)
- member_id (FK)
- plan_id (FK)
- amount
- status (paid/unpaid)
- invoice_date
- due_date
- pdf_path

Table: checkin_logs
- id (UUID)
- member_id (FK)
- checkin_time
- checkout_time (nullable)
```

=== 5. API Endpoints

`POST /auth/login` – Authenticate admin  
`GET /members/` – List members  
`POST /members/` – Add member  
`PUT /members/:id/` – Update member  
`DELETE /members/:id/` – Delete member  
`POST /checkin/` – Log check-in  
`POST /checkout/` – Log check-out  
`POST /invoices/generate` – Generate invoice  
`GET /invoices/:member_id/` – View invoice history  
`GET /dashboard/summary` – Get KPIs  
`POST /idcard/:member_id/pdf` – Generate ID card

=== 6. Scheduled Tasks

* **Daily Invoice Generator**
  - Triggered by Celery (with Redis broker)
  - For each member with active plan + due billing
  - Create new invoice

* **Membership Expiry Check** (optional future)


== Implementation

=== Phase 1: Environment Setup

. **Repository Initialization**
  - Create separate repositories: `frontend-gymapp` (React), `backend-gymapp` (Django)
  - Set up git, CI/CD (e.g., GitHub Actions)

. **Local Dev Setup**
  - Docker Compose for Postgres, Redis, backend, and frontend
  - `.env` files for secrets and configs

. **Basic Django Setup**
  - Initialize Django project with REST Framework
  - Install CORS, JWT auth, Celery, pdfkit, and AWS SDK (optional)

. **Basic React Setup**
  - Create Vite-based React project
  - Add routing, Tailwind, and Axios

=== Phase 2: Core Backend Features

. **Auth Module**
  - JWT-based admin login
  - Basic user creation via script or admin panel

. **Members Module**
  - CRUD for `Member`
  - Upload profile image (store locally first, then S3 if needed)
  - Generate UUID for member ID

. **Membership Plans**
  - CRUD plans with pricing and duration
  - Link plan to member

. **Check-In/Check-Out**
  - API to register check-in/out via member ID
  - Track timestamps in `checkin_logs`

. **Invoicing**
  - Manual: API to generate invoice
  - Scheduled: Celery task runs daily
  - Generate PDF (store file path in DB)

. **ID Cards**
  - PDF generator: barcode + member data
  - API to return downloadable file

=== Phase 3: Frontend Features

. **Login Page**
  - Admin login using JWT

. **Dashboard**
  - KPIs: Total members, Active plans, Check-ins today
  - Summary cards and quick buttons

. **Members UI**
  - List/Search members
  - Add/Edit/Delete member
  - Upload image
  - View profile and invoice history

. **Check-In UI**
  - Input barcode or type member ID
  - Show success/failure message

. **Invoices UI**
  - List invoices per member
  - Generate manually

. **ID Card Download**
  - Button to download card from PDF API

=== Phase 4: Deployment

. **Dev Hosting**
  - Frontend: Vercel or Netlify
  - Backend: Render, Railway, or DigitalOcean App Platform
  - PostgreSQL + Redis hosted with provider

. **Production Readiness**
  - Set up domain and HTTPS
  - Configure file storage (e.g., AWS S3)
  - Logging and error tracking (e.g., Sentry)


== Milestones

. **M1: Project Bootstrapping**
  - Git repo setup with README, license, basic folder structure
  - Dockerized backend + database + frontend skeleton

. **M2: Core Backend API**
  - JWT authentication
  - Member and Membership Plan CRUD
  - Image upload and barcode ID generation
  - Check-in/out APIs
  - Manual invoice generation

. **M3: Frontend MVP**
  - Login screen
  - Member management UI
  - Check-in screen
  - Invoicing UI

. **M4: Advanced Features**
  - ID card PDF export
  - Scheduled billing (Celery task + Redis)
  - Dashboard summary
  - Invoice PDF export

. **M5: Testing & QA**
  - Unit tests for backend
  - Integration tests (e.g., check-in/invoice workflows)
  - Manual UI walkthrough and validation

. **M6: Deployment**
  - Production deployment (frontend + backend + DB + Redis)
  - File storage configured (local or AWS S3)
  - Monitoring and error logging in place

. **M7: Handover**
  - Final documentation (API, setup, user guide)
  - Codebase handoff or contractor onboarding


== Gathering Results

To validate whether the system meets the requirements and performs well:

. **User Testing**
  - Run UAT (User Acceptance Testing) with gym staff
  - Collect feedback on member management, check-ins, and invoice workflows

. **Success Criteria**
  - Admins can complete all workflows without needing Excel
  - Scheduled billing generates invoices correctly
  - System handles real-time check-ins without lag
  - Mobile/tablet views function responsively

. **Performance Metrics**
  - Avg check-in API response < 500ms
  - Uptime > 99.5% over 30-day period
  - PDF generation under 3 seconds per document

. **Feedback Loop**
  - Add in-app feedback form for future improvements
  - Prioritize post-launch feature backlog (e.g., payment gateways, SMS reminders)
