version: '3.8'

services:
  # Lightweight PostgreSQL with aggressive memory tuning
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: gymapp
      POSTGRES_USER: gymapp_user
      POSTGRES_PASSWORD: gymapp_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'
    command: [
      "postgres",
      "-c", "shared_buffers=32MB",
      "-c", "effective_cache_size=96MB", 
      "-c", "maintenance_work_mem=16MB",
      "-c", "checkpoint_completion_target=0.9",
      "-c", "wal_buffers=4MB",
      "-c", "default_statistics_target=100",
      "-c", "random_page_cost=1.1",
      "-c", "effective_io_concurrency=200",
      "-c", "work_mem=4MB",
      "-c", "min_wal_size=80MB",
      "-c", "max_wal_size=1GB"
    ]

  # Ultra-lightweight Redis with memory limits
  redis:
    image: redis:7-alpine
    command: redis-server --maxmemory 32mb --maxmemory-policy allkeys-lru --save "" --appendonly no
    ports:
      - "6379:6379"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 48M
          cpus: '0.25'
        reservations:
          memory: 24M
          cpus: '0.1'

  # Optimized Django Web Service
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://gymapp_user:gymapp_password@db:5432/gymapp
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this-in-production}
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - DJANGO_SETTINGS_MODULE=gymapp.settings
    volumes:
      - media_files:/app/media
      - static_files:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.75'
        reservations:
          memory: 64M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Lightweight Celery Worker with minimal concurrency
  celery:
    build: 
      context: .
      dockerfile: Dockerfile
    command: celery -A gymapp worker --loglevel=warning --concurrency=1 --prefetch-multiplier=1 --max-tasks-per-child=100 --without-gossip --without-mingle
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://gymapp_user:gymapp_password@db:5432/gymapp
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this-in-production}
      - DJANGO_SETTINGS_MODULE=gymapp.settings
    volumes:
      - media_files:/app/media
    depends_on:
      - db
      - redis
      - web
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 96M
          cpus: '0.5'
        reservations:
          memory: 48M
          cpus: '0.25'

  # Minimal Celery Beat (only if scheduled tasks are essential)
  celery-beat:
    build: 
      context: .
      dockerfile: Dockerfile
    command: celery -A gymapp beat --loglevel=warning --scheduler django_celery_beat.schedulers:DatabaseScheduler --max-interval=300
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://gymapp_user:gymapp_password@db:5432/gymapp
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this-in-production}
      - DJANGO_SETTINGS_MODULE=gymapp.settings
    volumes:
      - media_files:/app/media
    depends_on:
      - db
      - redis
      - web
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.25'
        reservations:
          memory: 32M
          cpus: '0.1'

  # Minimal Frontend (if separate container is needed)
  frontend:
    build:
      context: ./admin-frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    depends_on:
      - web
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 32M
          cpus: '0.25'
        reservations:
          memory: 16M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Optional Nginx for production (only if needed)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_files:/app/staticfiles:ro
      - media_files:/app/media:ro
    depends_on:
      - web
      - frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 24M
          cpus: '0.25'
        reservations:
          memory: 16M
          cpus: '0.1'
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local

networks:
  default:
    driver: bridge 